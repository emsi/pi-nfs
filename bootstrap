#!/usr/bin/env bash

set -Eeuo pipefail

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

parse_env_file(){
  env_file="${script_dir}/$1"
  # read env file
  # shellcheck source=ENV
  . "${env_file}"
  # export variables from env file
  # shellcheck disable=SC2046
  export $(sed -e '/^[^=]\+=[^=]*$/!d' -e 's/^\([^=]\+\)=.*$/\1/' "${env_file}")
}

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-d] [-D] [-R] [-S] [-A] [-t] [-P] target_path

Raspberry pi nfsroot bootstrap script.

Available options:

-h, --help           Print this help and exit
-v, --verbose        Print verbose info (implies dry run)
-d, --debug          Print debug (each run command)
-D, --no-download    Don't download new dist files (fails if not previously
                     downloaded)
-S, --no-scripts     Don't run scripts from scripts folder
-A, --no-armscripts  Don't run scripts from scripts_arm
-t, --set-tftproot   Make a link at /stv/tftp pointing to \$target_path/boot
-P, --no-passwd      Don't prompt for new 'pi' user password
                     Leaving default password is UNSECURE (unless --githubuser
                     is used)
    --githubuser     Add github user public keys (downloaded from
                     https://github.com/[githubuser].keys)
                     to 'pi' user ~/.ssh/authorized_keys (implies --no-passwd)
    --arm-shell      Drop me into shell inside chrooted target location wsung
                     arm emulation. It happenes at the very end, right before
		     making tftp link (if requested). If you want to just drop
                     into shell use together with -D -S -A options.
EOF
}


msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  echo
  usage
  exit "$code"
}

parse_params() {
  while :; do
    case "${1-}" in
    -h | --help) usage && exit ;;
    -d | --debug) set -x ;;
    -v | --verbose) verbose=1 ;;
    -D | --no-download) export DOWNLOAD="no" ;; 
    -S | --no-script) noscript="yes" ;;
    -A | --no-armscript) noarmscript="yes" ;;
    -t | --set-tftproot) settftproot="yes" ;;
    -P | --no-passwd) export PI_SETPASS="no" ;;
    --githubuser)
	    githubuser="${2-}"
	    PI_SETPASS="no"
	    shift
	    ;;
    --arm-shell)
	    armshell="yes"
	    ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing target_path" 

  return 0
}

# main script starts here

parse_env_file "ENV"
if [[ -e "${script_dir}/.ENV" && -r "${script_dir}/.ENV" ]];then
  parse_env_file ".ENV"
fi

parse_params "$@"


TARGET_PATH="${args[0]}"
TARGET_PATH=$(realpath "${TARGET_PATH}")
export TARGET_PATH
SOURCE_PATH=$(realpath "${script_dir}")
export SOURCE_PATH
NFSROOT="${NFS_IP}:${TARGET_PATH}"
export NFSROOT

if [[ -n "${verbose-}" ]]; then
	# shellcheck disable=SC2046
	env | grep $(sed -e '/^[^=]\+=[^=]*$/!d' -e 's/^\([^=]\+\)=.*$/\1/' "${script_dir}/ENV" | sed -e ':a; N; $!ba; s/\n/\\\|/g')

	exit
fi

if [[ "${noscript-}" != "yes" ]]; then
	for script in "${script_dir}/scripts/"*; do
		if [[ -x $script ]]; then
			$script
		fi
	done
fi

if [[ "${noarmscript-}" != "yes" || "${armshell-}" == "yes" ]]; then
	# copy qemu static emulator so we can use it to chroot into
	cp /usr/bin/qemu-arm-static "${TARGET_PATH}/usr/bin"

	# setup cleanup to clean mounts
	trap cleanup SIGINT SIGTERM ERR EXIT
	cleanup() {
		trap - SIGINT SIGTERM ERR EXIT
		echo
		echo Removing bind mounts
		for path in dev/pts dev sys proc; do umount "${TARGET_PATH}/$path"; done
		umount "${TARGET_PATH}/scripts_arm"
		rmdir "${TARGET_PATH}/scripts_arm"
	        exit
	}
	
	echo "Mounting dev dev/pts sys proc inside '${TARGET_PATH}'"
	for path in dev dev/pts sys proc; do mount --bind /$path "${TARGET_PATH}/${path}" ; done

	# mounting scripts even if we won't use them
	# it simplifies cleanup plus lets us to inspect the scripts
	# from within the chroot
	mkdir -p "${TARGET_PATH}/scripts_arm"
	mount --bind "${script_dir}/scripts_arm/" "${TARGET_PATH}/scripts_arm"
fi

if [[ "${noarmscript-}" != "yes" ]]; then
	for script in "${script_dir}/scripts_arm/"*; do
		if [[ -x $script ]]; then
			chroot "${TARGET_PATH}" "/scripts_arm/$(basename $script)"
		fi
	done
fi

if [[ "${armshell-}" == "yes" ]]; then
	chroot "${TARGET_PATH}" /bin/bash
fi

if [[ -n ${githubuser-} ]]; then
	PI_SSH_PATH="${TARGET_PATH}/home/pi/.ssh"
	echo "Downloading and installing ssh keys for '${githubuser}' github user"
	mkdir -p "${PI_SSH_PATH}"
	curl "https://github.com/${githubuser}.keys" -o "${PI_SSH_PATH}/authorized_keys"
	chmod 600 "${PI_SSH_PATH}/authorized_keys"
	chown -R 1000:1000 "${PI_SSH_PATH}"
	echo "Disabling password login"
	sed -i -e 's/^pi:\$[^:]\+\(:.*\)$/pi:*\1/' "${TARGET_PATH}/etc/shadow"
fi


if [[ "${settftproot-}" == "yes" ]]; then
	echo "Making a link at /srv/tftp pointing to '${TARGET_PATH}/boot'"
	rm -f /srv/tftp
	ln -s "${TARGET_PATH}/boot" /srv/tftp
fi
