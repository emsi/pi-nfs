#!/usr/bin/env bash

set -Eeuo pipefail

# read default env
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
. "${script_dir}/ENV"
export $(sed -e '/^[^=]\+=[^=]*$/!d' -e 's/^\([^=]\+\)=.*$/\1/' "${script_dir}/ENV")

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-d] [-D] [-R] target_path

Raspberry pi nfsroot bootstrap script.

Available options:

-h, --help          Print this help and exit
-v, --verbose       Print verbose info (implies dry run)
-d, --debug         Print debug (each run command)
-D, --no-download   Don't download new dist files (fils if not previously downloaded)
-R, --no-ro-root    Don't enable read only root with overlay
-S, --no-scripts    Don't run scripts from scripts folder
-A, --no-armscripts Don't run scripts from scripts_arm
-t, --set-tftproot  Make a link at /stv/tftp pointing to \$target_path/boot
EOF
}


msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  echo
  usage
  exit "$code"
}

parse_params() {
  while :; do
    case "${1-}" in
    -h | --help) usage && exit ;;
    -d | --debug) set -x ;;
    -v | --verbose) verbose=1 ;;
    -D | --no-download) export DOWNLOAD="no" ;; 
    -R | --no-ro-root) export RO_ROOT="no" ;;
    -S | --no-script) noscript="yes" ;;
    -A | --no-armscript) noarmscript="yes" ;;
    -t | --set-tftproot) settftproot="yes" ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing target_path" 

  return 0
}

parse_params "$@"


TARGET_PATH="${args[0]}"
export TARGET_PATH=$(realpath "${TARGET_PATH}")
NFSROOT="${NFS_IP}:${TARGET_PATH}"

if [[ -n "${verbose-}" ]]; then
	env | grep $(sed -e '/^[^=]\+=[^=]*$/!d' -e 's/^\([^=]\+\)=.*$/\1/' "${script_dir}/ENV" | sed -e ':a; N; $!ba; s/\n/\\\|/g')

	exit
fi

if [[ "${noscript-}" != "yes" ]]; then
	for script in "${script_dir}/scripts/"*; do
		if [[ -x $script ]]; then
			$script
		fi
	done
fi


if [[ "${noarmscript-}" != "yes" ]]; then
	# copy qemu static emulator so we can use it to chroot into
	cp /usr/bin/qemu-arm-static "${TARGET_PATH}/usr/bin"
	
	# setup cleanup to clean mounts
	trap cleanup SIGINT SIGTERM ERR EXIT
	cleanup() {
		trap - SIGINT SIGTERM ERR EXIT
		echo Removing bind mounts
		for path in dev/pts dev sys proc; do umount "${TARGET_PATH}/$path"; done
		umount "${TARGET_PATH}/scripts_arm"
		rmdir "${TARGET_PATH}/scripts_arm"
	        exit
	}
	
	echo "Mounting dev dev/pts sys proc inside '${TARGET_PATH}'"
	for path in dev dev/pts sys proc; do mount --bind /$path "${TARGET_PATH}/${path}" ; done
	mkdir "${TARGET_PATH}/scripts_arm"
	mount --bind "${script_dir}/scripts_arm/" "${TARGET_PATH}/scripts_arm"
	
	
	for script in "${script_dir}/scripts_arm/"*; do
		if [[ -x $script ]]; then
			chroot "${TARGET_PATH}" "/scripts_arm/$(basename $script)"
		fi
	done
fi

if [[ "${settftproot-}" == "yes" ]]; then
	echo "Making a link at /srv/tftp pointing to '${TARGET_PATH}/boot'"
	rm -f /srv/tftp
	ln -s "${TARGET_PATH}/boot" /srv/tftp
fi
